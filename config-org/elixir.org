#+TITLE: Elixir
#+PROPERTY: header-args      :tangle "../config-elisp/elixir.el"
* Elixir TS Mode
Major mode for editing Elixir, powered by tree-sitter.

https://github.com/wkirschbaum/elixir-ts-mode
#+begin_src emacs-lisp
    (use-package elixir-mode :ensure t)
    (use-package elixir-ts-mode
      :ensure t
      :bind (:map elixir-ts-mode-map
		  ("C-S-s" . (lambda () (interactive) (save-buffer) (my/elixir-format)))
		  ("M-RET" . (lambda () (interactive) (open-line-below) (insert "|> ") (indent-for-tab-command))))
      :config
      (defvar elixir-outline-regexp
	(concat "^[[:space:]]*\\("
		"@moduledoc\\|@behaviour\\|@callback\\|@type\\|@typedoc\\|@doc\\|@spec\\|@impl"
		"\\|def\\(\\|p\\|callback\\|delegate\\|impl\\|overridable\\|exception\\|struct\\|guard\\|guardp\\|record\\|recordp\\|macro\\|macrop\\|macrocallback\\|protocol\\)"
		"\\|describe\\|test\\|setup\\|let\\|it\\|context\\|before\\|schema"
		"\\|use\\|alias\\|import\\|require"
		"\\)\\([[:space:]]\\|(\\)"))
      (defun my/elixir-format ()
	(interactive)
	(with-current-buffer (current-buffer)
	  (if (f-exists? (concat (project-root (project-current)) "/shell.nix"))
	      (call-process-shell-command (concat "cd " (project-root (project-current)) " && " "NIX_SKIP_SHELL_HOOK=true nix-shell --run \"mix format " (buffer-file-name) "\""))
	    (elixir-format)))
	(revert-buffer t t))
      :hook (elixir-ts-mode . (lambda () (setq-local outline-regexp elixir-outline-regexp)))
      :mode (("\\.ex\\'" . elixir-ts-mode)
	     ("\\.exs\\'" . elixir-ts-mode)
	     ("\\.heex\\'" . heex-ts-mode)
	     ("\\.leex\\'" . heex-ts-mode)))
#+end_src

