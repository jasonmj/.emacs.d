#+TITLE: Navigation
#+PROPERTY: header-args      :tangle "../config-elisp/navigation.el"
* Avy
Jump to things in Emacs tree-style.

https://github.com/abo-abo/avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :demand t
    :bind (("C-c j" . avy-goto-word-org-subword-1))
    :config
    (key-chord-define-global "jj" 'avy-goto-word-or-subword-1)
    (key-chord-define-global "JJ" 'avy-goto-char-in-line))
#+end_src
* Centered Cursor Mode
An emacs minor mode for smooth scrolling.

https://github.com/andre-r/centered-cursor-mode.el
#+begin_src emacs-lisp
  (use-package centered-cursor-mode
    :ensure t
    :bind ("s--" . centered-cursor-mode))
#+end_src
* Copy and Keep Highlight
Copy the currently selected region and keep it selected. 
#+begin_src emacs-lisp
  (defun copy-keep-highlight (beg end)
    (interactive "r")
    (prog1 (clipboard-kill-ring-save beg end)
      (setq deactivate-mark nil)))
   (global-set-key (kbd "M-w") 'copy-keep-highlight)
#+end_src
* Move to Beginning of Line
Move point back to indentation of beginning of line.
#+begin_src emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first.  If
     point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
	(forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
	(move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line] 'smarter-move-beginning-of-line)
  (eval-after-load 'org #'(define-key org-mode-map (kbd "C-a") 'smarter-move-beginning-of-line))
#+end_src
* Other Window
Select another window in cyclic ordering of windows.
#+begin_src emacs-lisp
  (key-chord-define-global ".," 'other-window)
  (emacs-set-key (kbd "s-o") 'other-window)
#+end_src
* Pop to Mark
Jump to mark, and pop a new position for mark off the ring or the global mark ring. 
#+begin_src emacs-lisp
  ;;(key-seq-define-global "o0" 'pop-to-mark-command)
  (key-seq-define-global "O)" 'consult-global-mark)
#+end_src
* Popper
Emacs minor-mode to summon and dismiss buffers easily. 

https://github.com/karthink/popper
#+begin_src emacs-lisp
  (use-package popper
    :ensure t
    :bind (("C-`"   . 'popper-cycle))
    :custom
    (popper-mode-line t)
    (popper-window-height nil)
    (popper-reference-buffers '("^Shell:" "^Aweshell:" "-shell\\*$"))
    :init
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src
* Related Files
Emacs package to easily find files related to the current one

https://github.com/DamienCassou/related-files
#+begin_src emacs-lisp
  (use-package related-files
    :ensure t
    :bind (("C-x j" . related-files-jump)))

  (use-package related-files-recipe
    :demand t
    :after related-files)

  (defun remove-directory-from-path (file remove-directory)
    "Return the paths to files looking like FILE but with REMOVE-DIRECTORY removed.

    The file-system is searched for existing directories but the
    returned paths don't have to exist."
    (when-let* ((path-segments (split-string file "/"))
		(positions (related-files-recipe--seq-positions path-segments remove-directory)))
      (cl-loop
       for position in positions
       for candidate = (string-join (related-files-recipe--seq-remove-at-position path-segments position) "/")
       collect candidate)))

  (defun replace-directory-in-path (file remove-directory add-directory)
    (let* ((without-removed (remove-directory-from-path file remove-directory))
	   (with-added (if without-removed
			   (related-files-recipe--add-directory-to-path (car without-removed) add-directory))))
      (if with-added
	  (car with-added)
	"")))

  (defun test-from-module (file)
    (concat (file-name-sans-extension (replace-directory-in-path file "lib" "test")) "_test.exs"))

  (defun module-from-test (file)
    (let* ((replaced (replace-directory-in-path file "test" "lib"))
	   (without-suffix (if (> (length replaced) 0) (substring (file-name-sans-extension replaced) 0 -5))))
      (if without-suffix
	  (concat without-suffix ".ex")
	file)))

  (defun spec-from-module (file)
    (concat (file-name-sans-extension (replace-directory-in-path file "lib" "spec")) "_spec.exs"))

  (defun module-from-spec (file)
    (let* ((replaced (replace-directory-in-path file "spec" "lib"))
	   (without-suffix (if (> (length replaced) 0) (substring (file-name-sans-extension replaced) 0 -5))))
      (if without-suffix
	  (concat without-suffix ".ex")
	file)))

  (defun my/related-files-jumper (file)
    (list
      (test-from-module file)
      (module-from-test file)
      (spec-from-module file)
      (module-from-spec file)))

  (setq related-files-jumpers (list #'my/related-files-jumper))
#+end_src
* Scratch
Visit the scratch buffer using quick access key bindings.
#+begin_src emacs-lisp
  (emacs-set-key (kbd "C-x x") 'scratch-buffer)
  (key-chord-define-global "xx" 'scratch-buffer)
#+end_src
* Select All
Put point at beginning and mark at end of buffer.
#+begin_src emacs-lisp
  (global-set-key (kbd "s-a") 'mark-whole-buffer)
#+end_src
* Smart Movement
Smart node movement based on expreg-expand.
#+begin_src emacs-lisp
  (defun forward-node ()
    (interactive)
    (let ((initial-pos (point)))
      (expreg-expand)
      (let ((new-pos (cdr (car (region-bounds)))))
	(if (eq initial-pos new-pos)
	    (progn (goto-char new-pos) (forward-char 1))
	  (goto-char new-pos))))
      (deactivate-mark))
  (global-set-key (kbd "C-s-f") 'forward-node)

  (defun backward-node ()
    (interactive)
    (let ((initial-pos (point)))
      (expreg-expand)
      (let ((new-pos (car (car (region-bounds)))))
	(if (eq initial-pos new-pos)
	    (progn (backward-char 1) (backward-node))
	  (goto-char new-pos))))
    (deactivate-mark))
  (global-set-key (kbd "C-s-b") 'backward-node)

  (defun up-node ()
    (interactive)
    (let ((initial-pos (point)))
      (expreg-expand)
      (let ((new-pos (car (car (region-bounds)))))
	(if (eq initial-pos new-pos)
	    (up-node)
	  (goto-char new-pos))))
    (deactivate-mark))
  (global-set-key (kbd "C-s-p") 'up-node)

  (global-set-key (kbd "C-s-n") 'down-list)
#+end_src
* Split Windows Horizontally
#+begin_src emacs-lisp
(setq window-combination-resize t
      split-width-threshold 300)
#+end_src
* Tabgo
avy-like jumper for tab-bar and tab-line.

https://github.com/isamert/tabgo.el
#+begin_src emacs-lisp
  (use-package tabgo
    :ensure t
    :bind ("C-S-SPC" . tabgo))
#+end_src
* Visit Line at Point
#+begin_src emacs-lisp
   (defun visit-line ()
     (interactive)
     (move-beginning-of-line 1)
     (set-mark (point))
     (move-end-of-line 1)
     ;; TODO: filter out everything in parens
     (let* ((args (split-string (s-trim (selection-or-thing-at-point)) ":"))
	    (filename (car args))
	    (fullpath (concat (project-root (project-current)) filename))
	    (line (car (cdr args))))
       (find-file fullpath)
       (goto-char (point-min))
       (forward-line (- (string-to-number line) 1))))
  (global-set-key (kbd "C-x i") 'visit-line)
#+end_src
* Windmove
Defines a set of routines, windmove-{left,up,right, down}, for selection of windows in a frame geometrically.
#+begin_src emacs-lisp
  (use-package windmove :ensure t)
  (emacs-set-key (kbd "s-b") 'windmove-left)
  (emacs-set-key (kbd "s-f") 'windmove-right)
  (emacs-set-key (kbd "s-p") 'windmove-up)
  (emacs-set-key (kbd "s-n") 'windmove-down)
  (emacs-set-key (kbd "C-1") 'delete-other-windows)
  (emacs-set-key (kbd "C-2") (lambda () (interactive) (split-window-below)
				    (run-with-idle-timer 0.15 nil (lambda() (interactive) (windmove-down)))))
  (emacs-set-key (kbd "C-3") (lambda () (interactive) (split-window-right) (windmove-right)))
  (emacs-set-key (kbd "<C-escape>") 'delete-window)
#+end_src
* Winner Undo
Winner mode is a global minor mode that records the changes in the window configuration (i.e. how
the frames are partitioned into windows) so that the changes can be "undone" using the command
winner-undo.
#+begin_src emacs-lisp
  (winner-mode 1)
  (emacs-set-key (kbd "s-z") 'winner-undo)
  (emacs-set-key (kbd "s-Z") 'winner-redo)
#+end_src
* Zoom
Fixed and automatic balanced window layout for Emacs.

https://github.com/cyrus-and/zoom
#+begin_src emacs-lisp
  (use-package zoom
    :ensure t
    :commands zoom-mode
    :preface
    (setq zoom-size '(0.618 . 0.618))
    :config
    (defun my/work-around-zoom-issue ()
      (message "reloading zoom-mode")
      (load "zoom.el")
      (remove-hook 'zoom-mode-hook #'my/work-around-zoom-issue))
    :hook
    ((zoom-mode . my/work-around-zoom-issue)
     (after-init . zoom-mode)))
#+end_src
