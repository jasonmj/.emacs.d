#+TITLE: Modalka
#+PROPERTY: header-args      :tangle "../config-elisp/modalka.el"
* Require Modalka
#+begin_src emacs-lisp
  (use-package modalka
    :ensure t
    :bind (:map modalka-mode-map
		("<S-backspace>" . backward-delete-char-untabify)))
#+end_src
* Custom Toggle Function
#+begin_src emacs-lisp
(defun toggle-modalka ()
  (interactive)
  (if (bound-and-true-p modalka-mode)
      (progn
        (modalka-mode -1)
        (setq cursor-type 'hbar)
        (setq exwm-input-line-mode-passthrough nil)
        (when (equal major-mode 'exwm-mode) (exwm-input-grab-keyboard)))
    (progn
      (when (equal major-mode 'exwm-mode) (setq exwm-input-line-mode-passthrough t))
      (modalka-mode 1)))
  (update-modalka-mode-line))
(key-seq-define-global "ii" 'toggle-modalka)
(emacs-set-key (kbd "s-i") 'toggle-modalka)
(emacs-set-key (kbd "<delete>") 'toggle-modalka)
(emacs-set-key (kbd "<print>") 'toggle-modalka)
#+end_src
* Update Mode Line Indication
#+begin_src emacs-lisp
(defun update-modalka-mode-line()
  (if (bound-and-true-p modalka-mode)
      (progn
        (custom-set-faces '(doom-modeline-bar ((t (:background "cyan1")))))
        (setq doom-modeline-bar-width 6))
    (progn
      (custom-set-faces '(doom-modeline-bar ((t (:background "DarkGoldenrod1")))))
      (setq doom-modeline-bar-width 6)))
  (unless (eq system-type 'darwin) (exwm-layout--refresh)))
#+end_src
* Define EXWM Keys
#+begin_src emacs-lisp
  (defun modalka-exwm-click()
    (interactive)
    (toggle-modalka)
    (call-process-shell-command "xdotool click 1")
    (call-process-shell-command "xdotool click 1")
    (run-with-idle-timer 0.25 nil 'toggle-modalka))
  (defun define-exwm-keys()
    (define-key modalka-mode-map (kbd "<down-mouse-1>") 'modalka-exwm-click)
    (define-key modalka-mode-map (kbd "<mouse-drag-region>") 'modalka-exwm-click)
    (define-key modalka-mode-map (kbd "`") 'eshell-with-name)
    (define-key modalka-mode-map (kbd "~") 'bury-buffer)
    (define-key modalka-mode-map (kbd "<escape>") (lambda () (interactive) (exwm-toggle-fullscreen)))
    (define-key modalka-mode-map (kbd "0") (lambda () (interactive) (exwm-workspace-switch 0)))
    (define-key modalka-mode-map (kbd "1") (lambda () (interactive) (exwm-workspace-switch 1)))
    (define-key modalka-mode-map (kbd "2") (lambda () (interactive) (exwm-workspace-switch 2)))
    (define-key modalka-mode-map (kbd "3") (lambda () (interactive) (exwm-workspace-switch 3)))
    (define-key modalka-mode-map (kbd "/") (lambda ()
                                             (interactive)
                                             (exwm-input--fake-key ?\/)
                                             (toggle-modalka)))
    (define-key modalka-mode-map (kbd "[") (lambda () (interactive) (exwm-input--fake-key 'M-left)))
    (define-key modalka-mode-map (kbd "]") (lambda () (interactive) (exwm-input--fake-key 'M-right)))
    (define-key modalka-mode-map (kbd "'") (lambda ()
                                             (interactive)
                                             (exwm-input--fake-key '\")
                                             (exwm-input--fake-key 'home)
                                             (exwm-input--fake-key '\")
                                             (exwm-input--fake-key 'return)))
    (define-key modalka-mode-map (kbd "\"") (lambda ()
                                             (interactive)
                                             (exwm-input--fake-key '\")
                                             (exwm-input--fake-key 'end)
                                             (exwm-input--fake-key '\")
                                             (exwm-input--fake-key 'return)))
    (define-key modalka-mode-map (kbd "<down>") (lambda () (interactive) (exwm-input--fake-key 'down)))
    (define-key modalka-mode-map (kbd "<left>") (lambda () (interactive) (exwm-input--fake-key 'left)))
    (define-key modalka-mode-map (kbd "<right>") (lambda () (interactive) (exwm-input--fake-key 'right)))
    (define-key modalka-mode-map (kbd "<up>") (lambda () (interactive) (exwm-input--fake-key 'up)))
    (define-key modalka-mode-map (kbd "-") (lambda () (interactive) (exwm-input--fake-key 'C--)))
    (define-key modalka-mode-map (kbd "=") (lambda () (interactive) (exwm-input--fake-key 'C-+)))
    (define-key modalka-mode-map (kbd ".") 'repeat)
    (define-key modalka-mode-map (kbd ";") 'counsel-recentf)
    (define-key modalka-mode-map (kbd "#") (lambda () (interactive) (exwm-input--fake-key ?\#)))
    (define-key modalka-mode-map (kbd "@") (lambda () (interactive) (exwm-input--fake-key ?\@)))
    (define-key modalka-mode-map (kbd ",") (lambda ()
               (interactive)
               (exwm-input--fake-key 'home)
               (exwm-input--fake-key 'S-end)
               (exwm-input--fake-key ?\C-c)))
    (define-key modalka-mode-map (kbd "<M-right>") (lambda () (interactive) (exwm-input--fake-key 'M-right)))
    (define-key modalka-mode-map (kbd "<M-left>") (lambda () (interactive) (exwm-input--fake-key 'M-left)))
    (define-key modalka-mode-map (kbd "<return>") (lambda () (interactive) (exwm-input--fake-key 'return)))
    (define-key modalka-mode-map (kbd "<backspace>") (lambda () (interactive) (exwm-input--fake-key 'backspace)))
    (define-key modalka-mode-map (kbd "<S-backspace>") (lambda () (interactive) (exwm-input--fake-key 'C-backspace)))
    ;;(define-key modalka-mode-map (kbd "<M-tab>") 'centaur-tabs-forward-group)
    (define-key modalka-mode-map (kbd "<C-tab>") 'tab-line-switch-to-next-tab)
    (define-key modalka-mode-map (kbd "<tab>") (lambda () (interactive) (exwm-input--fake-key 'C-tab)))
    (define-key modalka-mode-map (kbd "<C-iso-lefttab>") 'tab-line-switch-to-prev-tab)
    (define-key modalka-mode-map (kbd "<iso-lefttab>") 'tab-line-switch-to-prev-tab)
    (define-key modalka-mode-map (kbd "C-w") (lambda () (interactive) (exwm-input--fake-key ?\C-w)))
    (define-key modalka-mode-map (kbd "C-r") (lambda () (interactive) (exwm-input--fake-key ?\C-r)))
    (define-key modalka-mode-map (kbd "C-t") (lambda () (interactive) (exwm-input--fake-key ?\C-t)))
    (define-key modalka-mode-map (kbd "a") (lambda () (interactive) (exwm-input--fake-key 'home)))
    (define-key modalka-mode-map (kbd "A") (lambda () (interactive) (exwm-input--fake-key ?\C-a)))
    (define-key modalka-mode-map (kbd "b") (lambda () (interactive) (exwm-input--fake-key 'left)))
    (define-key modalka-mode-map (kbd "B") (lambda () (interactive) (exwm-input--fake-key 'C-S-left)))
    (define-key modalka-mode-map (kbd "c") (lambda () (interactive) (exwm-input--fake-key ?\C-c)))
    (define-key modalka-mode-map (kbd "d") (lambda () (interactive) (exwm-input--fake-key 'delete)))
    (define-key modalka-mode-map (kbd "D") (lambda () (interactive) (exwm-input--fake-key 'C-delete)))
    (define-key modalka-mode-map (kbd "e") (lambda () (interactive) (exwm-input--fake-key 'end)))
    (define-key modalka-mode-map (kbd "E") (lambda () (interactive) (exwm-input--fake-key 'S-end)))
    (define-key modalka-mode-map (kbd "f") (lambda () (interactive) (exwm-input--fake-key 'right)))
    (define-key modalka-mode-map (kbd "F") (lambda () (interactive) (exwm-input--fake-key 'C-S-right)))
    (define-key modalka-mode-map (kbd "g") (lambda () (interactive) (exwm-input--fake-key 'escape)))
    (define-key modalka-mode-map (kbd "i") (lambda () (interactive) (toggle-modalka)))
    (define-key modalka-mode-map (kbd "j") (lambda () (interactive) (exwm-input--fake-key 'C-S-j)))
    (define-key modalka-mode-map (kbd "k") (lambda ()
               (interactive)
               (exwm-input--fake-key 'home)
               (exwm-input--fake-key 'S-end)
               (exwm-input--fake-key 'delete)
               (exwm-input--fake-key 'backspace)))
    (define-key modalka-mode-map (kbd "l") (lambda ()
               (interactive)
               (exwm-input--fake-key ?\C-l)
               (exwm-input--fake-key ?\C-c)
               (toggle-modalka)))
    (define-key modalka-mode-map (kbd "L") 'open-lastpass)
    (define-key modalka-mode-map (kbd "m") (lambda () (interactive) (exwm-input--fake-key 'return)))
    (define-key modalka-mode-map (kbd "M") (lambda () (interactive) (exwm-input--fake-key 'C-M)))
    (define-key modalka-mode-map (kbd "S-RET") (lambda () (interactive) (exwm-input--fake-key 'C-M)))
    (define-key modalka-mode-map (kbd "o") (lambda ()
               (interactive)
               (exwm-input--fake-key 'home)
               (exwm-input--fake-key 'return)
               (exwm-input--face-key 'up)))
    (define-key modalka-mode-map (kbd "n") (lambda () (interactive) (exwm-input--fake-key 'down)))
    (define-key modalka-mode-map (kbd "N") (lambda () (interactive) (exwm-input--fake-key 'S-down)))
    (define-key modalka-mode-map (kbd "p") (lambda () (interactive) (exwm-input--fake-key 'up)))
    (define-key modalka-mode-map (kbd "P") (lambda () (interactive) (exwm-input--fake-key 'S-up)))
    (define-key modalka-mode-map (kbd "r") (lambda () (interactive) (exwm-input--fake-key 'C-S-r)))
    (define-key modalka-mode-map (kbd "R") (lambda () (interactive) (exwm-input--fake-key 'M-r)))
    (define-key modalka-mode-map (kbd "s") (lambda ()
               (interactive)
               (exwm-input--fake-key ?\C-f)
               (toggle-modalka)))
    (define-key modalka-mode-map (kbd "t") (lambda ()
               (interactive)
               (exwm-input--fake-key ?\C-t)
               (toggle-modalka)))
    (define-key modalka-mode-map (kbd "T") (lambda () (interactive) (exwm-input--fake-key 'C-S-t)))
    (define-key modalka-mode-map (kbd "u") (lambda ()
               (interactive)
               (exwm-input--fake-key ?\C-u)
               (toggle-modalka)))
    (define-key modalka-mode-map (kbd "v") (lambda () (interactive) (exwm-input--fake-key 'next)))
    (define-key modalka-mode-map (kbd "V") (lambda () (interactive) (exwm-input--fake-key 'prior)))
    (define-key modalka-mode-map (kbd "w") (lambda () (interactive) (exwm-input--fake-key ?\C-w)))
    (define-key modalka-mode-map (kbd "y") (lambda () (interactive) (exwm-input--fake-key ?\C-v)))
    (define-key modalka-mode-map (kbd "Y") (lambda () (interactive) (kbd "M-y")))
    (define-key modalka-mode-map (kbd "x") (lambda () (interactive) (exwm-input--fake-key ?x)))
    (define-key modalka-mode-map (kbd "z") (lambda () (interactive) (exwm-input--fake-key ?\C-z)))
    (define-key modalka-mode-map (kbd "<XF86Display>") (lambda () (interactive) (exwm-input--fake-key 'f7)))
    (define-key modalka-mode-map (kbd "Z") (lambda () (interactive) (exwm-input--fake-key 'C-S-z))))
#+end_src
* Define Emacs Keys
#+begin_src emacs-lisp
  (defun define-emacs-keys()
    (define-key modalka-mode-map (kbd "0") (lambda () (interactive) (message "Workspace 0") (exwm-workspace-switch 0)))
    (define-key modalka-mode-map (kbd "1") (lambda () (interactive) (message "Workspace 1") (exwm-workspace-switch 1)))
    (define-key modalka-mode-map (kbd "2") (lambda () (interactive) (message "Workspace 2") (exwm-workspace-switch 2)))
    (define-key modalka-mode-map (kbd "3") (lambda () (interactive) (message "Workspace 3") (exwm-workspace-switch 3)))
    (define-key modalka-mode-map (kbd "4") (lambda () (interactive) (message "Workspace 4") (exwm-workspace-switch 4)))
    (define-key modalka-mode-map (kbd "5") (lambda () (interactive) (message "Workspace 5") (exwm-workspace-switch 5)))
    (define-key modalka-mode-map (kbd "6") (lambda () (interactive) (message "Workspace 6") (exwm-workspace-switch 6)))
    (define-key modalka-mode-map (kbd "7") (lambda () (interactive) (message "Workspace 7") (exwm-workspace-switch 7)))
    (define-key modalka-mode-map (kbd "8") (lambda () (interactive) (message "Workspace 8") (exwm-workspace-switch 8)))
    (define-key modalka-mode-map (kbd "9") (lambda () (interactive) (message "Workspace 9") (exwm-workspace-switch 9)))
    (modalka-define-kbd "`" "C-`")
    (modalka-define-kbd "~" "M-[")
    (modalka-define-kbd "-" "C--")
    (modalka-define-kbd "+" "C-+")
    (modalka-define-kbd "=" "C-+")
    (define-key modalka-mode-map (kbd ",") (lambda () (interactive) (toggle-modalka) (insert-char 44 1)))
    (define-key modalka-mode-map (kbd ".") 'xref-find-definitions)
    (define-key modalka-mode-map (kbd "/") 'xref-find-references)
    (modalka-define-kbd "\\" "C-\\")
    (modalka-define-kbd "<" "M-<")
    (modalka-define-kbd ">" "M->")
    (modalka-define-kbd "a" "C-a")
    (modalka-define-kbd "A" "C-S-a")
    (modalka-define-kbd "b" "C-b")
    (modalka-define-kbd "B" "M-b")
    (modalka-define-kbd "c" "M-w")
    (modalka-define-kbd "d" "C-d")
    (modalka-define-kbd "D" "M-d")
    (modalka-define-kbd "e" "C-e")
    (modalka-define-kbd "E" "C-S-e")
    (modalka-define-kbd "f" "C-f")
    (modalka-define-kbd "F" "M-f")
    (modalka-define-kbd "g" "C-g")
    (define-key modalka-mode-map (kbd "i") (lambda () (interactive) (toggle-modalka)))
    (modalka-define-kbd "j" "C-c j")
    (modalka-define-kbd "k" "C-k")
    (modalka-define-kbd "l" "C-l")
    (modalka-define-kbd "m" "C-m")
    (modalka-define-kbd "M" "<S-return>")
    (modalka-define-kbd "n" "C-n")
    (define-key modalka-mode-map (kbd "N") (lambda () (interactive) (if (or (not mark-active)  (null (mark))  (= (point) (mark))) (set-mark-command nil)) (next-line)))
    (modalka-define-kbd "o" "C-o")
    (modalka-define-kbd "p" "C-p")
    (define-key modalka-mode-map (kbd "P") (lambda () (interactive) (if (or (not mark-active)  (null (mark))  (= (point) (mark))) (set-mark-command nil)) (previous-line)))
    (modalka-define-kbd "s" "C-s")
    (modalka-define-kbd "S" "M-s")
    (modalka-define-kbd "u" "S-TAB")
    (modalka-define-kbd "v" "C-v")
    (modalka-define-kbd "V" "M-v")
    (modalka-define-kbd "w" "M-w")
    (modalka-define-kbd "y" "C-y")
    (modalka-define-kbd "Y" "M-y")
    (modalka-define-kbd "z" "C-+")
    (modalka-define-kbd "Z" "C--")
    (modalka-define-kbd "<backspace>" "<C-backspace>")
    (define-key modalka-mode-map (kbd "SPC") (lambda () (interactive) (toggle-modalka) (insert-char 32 1)))
    (modalka-define-kbd "<escape>" "C-.")
    (modalka-define-kbd "<backtab>" "<C-S-return>")
    (modalka-define-kbd "<tab>" "<C-return>")
    (modalka-define-kbd "<right>" "C-f")
    (modalka-define-kbd "<left>" "C-b")
    (modalka-define-kbd "<down>" "C-n")
    (modalka-define-kbd "<up>" "C-p")
    (modalka-define-kbd "<return>" "RET")
    (define-key modalka-mode-map (kbd "C-w") nil))
#+end_src
* Automatically Enable Modalka
#+begin_src emacs-lisp
  (defun maybe-modalka-mode (&rest args)
    (if (or (minibufferp)
	    (and (not (eq (get-buffer " *corfu*") nil))
		 (not (equal (with-current-buffer (get-buffer " *corfu*") (buffer-string)) "")))
	    (eq major-mode 'exwm-mode)
	    (eq major-mode 'epa-pinentry-mode)
	    (eq major-mode 'epg-pinentry-mode)
	    (eq major-mode 'eshell-mode)
	    (eq major-mode 'bufler-list-mode)
	    (eq major-mode 'Buffer-menu-mode)
	    (eq major-mode 'corfu-mode)
	    (eq major-mode 'corfu-indexed-mode)
	    (eq major-mode 'corfu-history-mode)
	    (eq major-mode 'mini-frame-mode)
	    (eq major-mode 'minibuffer-mode)
	    (eq major-mode 'proced-mode)
	    (eq major-mode 'shell-mode)
	    (eq major-mode 'vterm-mode)
	    (eq major-mode 'magit-status-mode)
	    (eq major-mode 'magit-stash-mode)
	    (eq major-mode 'text-mode)
	    (eq major-mode 'dired-mode))
	(progn
	  (if (bound-and-true-p modalka-mode)
	      (progn (modalka-mode -1)
		     (setq cursor-type 'hbar))))
      (progn
	(if (not (bound-and-true-p modalka-mode))
	    (progn (toggle-modalka)))))
    (update-modalka-mode-line))
  (add-hook 'exwm-manage-finish-hook 'update-modalka-mode-line)
  (add-hook 'exwm-mode-hook 'maybe-modalka-mode)
  (add-hook 'exwm-workspace-switch-hook 'maybe-modalka-mode)
  (add-hook 'change-major-mode-hook 'maybe-modalka-mode)
  (add-to-list 'window-selection-change-functions 'maybe-modalka-mode)
  ;;(defun delayed-maybe-modalka-mode (&rest args) (run-with-timer 0.75 nil 'maybe-modalka-mode))
  (advice-add 'set-window-buffer :after 'maybe-modalka-mode)
  ;; (advice-remove 'set-window-buffer 'delayed-maybe-modalka-mode)
#+end_src
* Custom Modalka Init
#+begin_src emacs-lisp
(defun custom-modalka-init ()
  (if (equal major-mode 'exwm-mode)
      (progn
        (exwm-input-release-keyboard)
        (setq exwm-input-line-mode-passthrough t)
        (unless (eq system-type 'darwin) (define-exwm-keys)))
    (progn
      (setq exwm-input-line-mode-passthrough nil)
      (define-emacs-keys))))
(add-hook 'modalka-mode-hook 'custom-modalka-init)
#+end_src
* Set Box Cursor to Indicate Mode
#+begin_src emacs-lisp
(setq modalka-cursor-type 'box)
#+end_src
