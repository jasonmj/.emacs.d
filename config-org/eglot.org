#+TITLE: Eglot
#+PROPERTY: header-args      :tangle "../config-elisp/eglot.el"
* Eldoc Box
Display a childframe doc for eglot and anything that uses eldoc.

https://github.com/casouri/eldoc-box
#+begin_src emacs-lisp
  (use-package eldoc-box
    :ensure t
    :hook (eglot--managed-mode . eldoc-box-hover-mode)
    :bind (("s-TAB" . eldoc-box-help-at-point))
    :config
    (custom-set-faces `(eldoc-box-body ((t (:background ,(face-attribute 'default :background) :foreground ,(face-attribute 'default :foreground))))))
    (custom-set-faces `(eldoc-box-border ((t (:background ,(face-attribute 'default :foreground))))))
    (advice-add 'eglot--mode-line-format :override (lambda () ""))
    :custom
    (eglot-menu-string "")
    (eldoc-box-offset '(16 16 40))
    (eldoc-box-max-pixel-height 450)
    (eldoc-documentation-strategy 'eldoc-documentation-enthusiast)
    (eldoc-idle-delay 999)
    (eldoc-box-cleanup-interval 1))
#+end_src
* Eglot
Eglot is the Emacs client for the Language Server Protocol (LSP). 

https://joaotavora.github.io/eglot/
#+begin_src emacs-lisp
  (use-package eglot
    :hook ((elixir-ts-mode . eglot-ensure)
	   (elixir-ts-mode-hook . eglot-ensure)
	   (c-mode . eglot-ensure)
	   (eglot--managed-mode . manually-activate-flymake)
	   (python-mode . eglot-ensure))
    :custom
    (eglot-extend-to-xref t)
    (read-process-output-max (* 1024 1024))
    :config
    (add-to-list 'exec-path "/Users/jjohnson/git/elixir-ls/")
    (add-to-list 'exec-path "/Users/jjohnson/git/lexical-lsp/lexical/_build/dev/package/lexical/bin/")
    (add-to-list 'eglot-stay-out-of 'flymake)
    (add-to-list 'eglot-server-programs '(python-mode . ("pyright-langserver" "--stdio")))
    (add-to-list 'eglot-server-programs `((elixir-ts-mode heex-ts-mode) . ,(eglot-alternatives '("language_server.sh" "start_lexical.sh"))))
    (push :documentHighlightProvider eglot-ignored-server-capabilities)
    ;; (add-to-list 'exec-path "/Users/jjohnson/.nix-profile/bin/")
    ;; (with-eval-after-load 'eglot
    ;;   (add-to-list 'eglot-server-programs
    ;;       	 `((elixir-ts-mode heex-ts-mode elixir-mode) .
    ;;       	   ("nextls" "--stdio=true" :initializationOptions (:experimental (:completions (:enable t)))))))
   )
#+end_src
** Manually activate flymake
#+begin_src emacs-lisp
  (defun manually-activate-flymake ()
    (add-hook 'flymake-diagnostic-functions #'eglot-flymake-backend nil t)
    (flymake-mode 1))
#+end_src
* Eglot Booster
#+begin_src emacs-lisp
(use-package eglot-booster
  :after eglot
  :straight (eglot-booster :type git :host github :repo "jdtsmith/eglot-booster")
  :config (eglot-booster-mode))
#+end_src
