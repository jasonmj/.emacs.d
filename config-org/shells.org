#+TITLE: Shells
#+PROPERTY: header-args      :tangle "../config-elisp/shells.el"
* Eshell
Eshell is a shell-like command interpreter.
#+begin_src emacs-lisp
  (use-package eshell
    :bind (:map eshell-mode-map
		("C-l" . eshell-clear)
		("<M-tab>" . tab-bar-switch-to-next-tab))
    :config
    (require 'em-smart)
    (require 'em-tramp)
    (defun eshell-clear ()
      (interactive)
      (let ((eshell-buffer-maximum-lines 0))
	(eshell-truncate-buffer)
	(previous-line)
	(delete-char 1)))
    (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t)
    :custom 
    (eshell-banner-message "")
    (eshell-visual-commands '("bat" "less" "more" "htop" "man" "vim" "fish"))
    (eshell-destroy-buffer-when-process-dies t)
    (eshell-cmpl-autolist t)
    (eshell-where-to-jump 'begin)
    (eshell-review-quick-commands nil)
    (eshell-smart-space-goes-to-end t)
    (eshell-history-size 10000)
    :hook ((eshell-mode-hook . (lambda ()
				 (setq eshell-prefer-lisp-functions t
				       password-cache t
				       password-cache-expiry 900)
				 (setq-local truncate-lines -1)
				 (setenv "TERM" "xterm-256color")))))
#+end_src
** Eshell Prompt Extras
Display extra information and color for your eshell prompt. 

https://github.com/zwild/eshell-prompt-extras
#+begin_src emacs-lisp
  (use-package eshell-prompt-extras :ensure t
    :config
    (with-eval-after-load "esh-opt"
      (autoload 'epe-theme-lambda "eshell-prompt-extras")
      (setq eshell-highlight-prompt nil
	    eshell-prompt-function 'epe-theme-lambda)))
#+end_src
** Eshell Syntax Highlighting
Syntax highlighting for Eshell.

https://github.com/akreisher/eshell-syntax-highlighting/
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :ensure t
    :after eshell-mode
    :hook (eshell-mode . eshell-syntax-highlighting-global-mode))
#+end_src
** Eshell with Name
Quickly create an eshell with a name or switch to an open eshell with completing read. 
#+begin_src emacs-lisp
  (defun eshell-buffer (buffer-name)
    (let* ((eshell-buffer-exists (member buffer-name
					 (mapcar (lambda (buf)
						   (buffer-name buf))
						 (buffer-list)))))
      (if eshell-buffer-exists
	  (switch-to-buffer buffer-name)
	(progn
	  (eshell 99)
	  (rename-buffer (concat "Eshell: <" buffer-name ">"))))))

  (defun eshell-with-name ()
    (interactive)
    (let* ((eshell-buffers (seq-filter (lambda (buf) (eq (with-current-buffer buf major-mode) 'eshell-mode))
				       (buffer-list)))
	   (eshell-buffer-names (mapcar (lambda (buf)
					  (buffer-name buf))
					eshell-buffers))
	   (buffer-name (completing-read "Eshell buffers: " eshell-buffer-names)))
      (eshell-buffer buffer-name)))
  (emacs-set-key (kbd "C-`") 'eshell-with-name)
#+end_src
** xterm-color
#+begin_src emacs-lisp
  (use-package xterm-color
    :ensure t
    :config
    (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
    :custom
    (eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
    :hook ((eshell-mode . (lambda () (setenv "TERM" "xterm-256color")))
	   (eshell-before-prompt . (lambda () (setq xterm-color-preserve-properties t)))))
#+end_src

* Shell Mode
#+begin_src emacs-lisp
    (use-package shell
      :bind (("C-l" . clear-shell-buffer))
      :config
      (defun clear-shell-buffer () (interactive)
	   (erase-buffer)
	   (comint-send-input)
	   (beginning-of-buffer)
	   (delete-char 1)
	   (end-of-line))
      :hook ((shell-mode . compilation-shell-minor-mode)))
#+end_src
** Compilation Find File Advice
#+begin_src emacs-lisp
  (defun clean-compilation-filename (filename)
    (string-trim
	 (replace-regexp-in-string "\\(\*\* \\|â”ƒ\\)" ""
			       (replace-regexp-in-string "\([^\"]+?\)" ""
							 (string-trim filename)))))
  (defun compilation-find-file-fixer (orig-fun marker filename &rest args)
    (message (clean-compilation-filename filename))
    (apply orig-fun marker
	   (clean-compilation-filename filename)
	   args))
  (advice-add 'compilation-find-file :around #'compilation-find-file-fixer)
#+end_src
** Return to Shell Mode
#+begin_src emacs-lisp
  (defun return-to-shell-mode () (interactive) (with-current-buffer (current-buffer) (shell-mode)))
#+end_src
** Send Quoted Tab
#+begin_src emacs-lisp
  (defun comint-send-tab ()
    "Send a tab character to the current buffer's process"
    (interactive)
    (comint-send-input t t)
    (process-send-string (current-buffer) "\t"))
  (define-key shell-mode-map (kbd "S-<iso-lefttab>") 'comint-send-tab)
  ;; (add-to-list 'completion-at-point-functions 'comint-send-tab)
#+end_src
** Shell with Name
Quickly create a shell with a name or switch to an open shell with completing read.
#+begin_src emacs-lisp
  (defun shell-buffer (buffer-name)
    (let* ((shell-buffer-exists (member buffer-name
					(mapcar (lambda (buf) (buffer-name buf))
						(buffer-list)))))
      (if shell-buffer-exists
	  (switch-to-buffer buffer-name)
	(progn
	  (shell "tmp")
	  (rename-buffer (concat "Shell: <" buffer-name ">"))))))

  (defun shell-with-name ()
    (interactive)
    (let* ((shell-buffers (seq-filter (lambda (buf) (eq (with-current-buffer buf major-mode) 'shell-mode))
				       (buffer-list)))
	   (shell-buffer-names (mapcar (lambda (buf)
					  (buffer-name buf))
					shell-buffers))
	   (buffer-name (completing-read "Shell buffers: " shell-buffer-names)))
      (shell-buffer buffer-name)))
  (emacs-set-key (kbd "M-`") 'shell-with-name)
#+end_src
** Sticky Shell
Minor mode to keep track of previous prompt in your shell.

https://github.com/andyjda/sticky-shell
#+begin_src emacs-lisp
  (use-package sticky-shell
    :straight (:type git :host github :repo "andyjda/sticky-shell")
    :hook (shell-mode . sticky-shell-mode)
    :config
    (defun clear-shell-buffer-to-last-prompt () (interactive)
	 (end-of-buffer)
	 (set-mark (point))
	 (comint-previous-prompt 1)
	 (end-of-line)
	 (forward-char)
	 (delete-active-region))
    :bind (:map shell-mode-map
		("C-S-l" . clear-shell-buffer-to-last-prompt)))
#+end_src
** Syntax Overlay Region
#+begin_src emacs-lisp
  (defun syntax-overlay-region ()
    (interactive)
    (unless (region-active-p)
      (user-error "No region active"))
    (let* ((lang-mode 'elixir-mode)
	   (body-start (region-beginning))
	   (body-end (region-end))
	   (string (buffer-substring-no-properties body-start body-end))
	   (buf (current-buffer))
	   (pos 0)
	   (props)
	   (overlay)
	   (propertized-text))
      (if (fboundp lang-mode)
	  (progn
	    (setq propertized-text
		  (with-current-buffer
		      (get-buffer-create
		       (format " *fontification:%s*" lang-mode))
		    (let ((inhibit-modification-hooks nil)
			  (inhibit-message t))
		      (erase-buffer)
		      ;; Additional space ensures property change.
		      (insert string " ")
		      (funcall lang-mode)
		      (font-lock-ensure))
		    (buffer-string)))
	    (while (< pos (length propertized-text))
	      (setq props (text-properties-at pos propertized-text))
	      (setq overlay (make-overlay (+ body-start pos)
					  (+ body-start (1+ pos))
					  buf))
	      (overlay-put overlay 'face (plist-get props 'face))
	      (setq pos (1+ pos))))
	(message "%s not found" lang-mode))))
#+end_src
* Vterm
#+begin_src emacs-lisp
(add-to-list 'load-path (concat "/etc/links/vterm/" (string-trim (shell-command-to-string "ls /etc/links/vterm/"))))
(require 'vterm)
(setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes")
(defun vterm-startup ()
  (define-key vterm-mode-map (kbd "C-c C-t") 'vterm-copy-mode)
  (define-key vterm-mode-map (kbd "C-p") 'vterm-copy-mode)
  (define-key vterm-mode-map (kbd "C-c C-\\") 'vterm-send-C-c)
  (define-key vterm-mode-map (kbd "M-p") 'vterm-send-up)
  (define-key vterm-mode-map (kbd "M-n") 'vterm-send-down)
  (define-key vterm-mode-map (kbd "C-z") 'vterm-undo)
  (define-key vterm-copy-mode-map (kbd "M-n") 'vterm-next-prompt)
  (define-key vterm-copy-mode-map (kbd "C-z") 'vterm-undo)
  (define-key vterm-copy-mode-map (kbd "M-p") 'vterm-previous-prompt)
  (define-key vterm-copy-mode-map (kbd "C-l") (lambda () (interactive) (vterm-copy-mode -1) (vterm-clear)))
  (with-eval-after-load 'centered-cursor-mode
        (add-hook 'after-change-major-mode-hook
            (lambda ()
              (centered-cursor-mode 0))
            :append
            :local))
  (setq-local global-hi-lock-mode nil)
  (setq-local global-hl-line-mode nil))
(add-hook 'vterm-mode-hook 'vterm-startup)
#+end_src
** Vterm Toggl
#+begin_src emacs-lisp
(use-package vterm-toggle
  :ensure t
  :config
  (emacs-set-key (kbd "C-s-t") 'vterm-toggle))
#+end_src
