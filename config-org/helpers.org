#+TITLE: Helpers
#+PROPERTY: header-args      :tangle "../config-elisp/helpers.el"
* App Launcher
Launch application from Emacs.

https://github.com/SebastienWae/app-launcher
#+begin_src emacs-lisp
(use-package app-launcher
  :straight '(app-launcher :host github :repo "SebastienWae/app-launcher")
  :bind (("C-s-SPC" . app-launcher-run-app)))
#+end_src
* Copy File Name
Copy the current buffer file name to the clipboard.
#+begin_src emacs-lisp
  (defun copy-file-name ()
      "Copy the current buffer file name to the clipboard."
      (interactive)
      (let ((filename (if (equal major-mode 'dired-mode)
			  default-directory
			(buffer-file-name))))
	(if filename
	    (progn
	      (kill-new filename)
	      (message "Copied '%s'" filename))
	  (warn "Current buffer is not attached to a file!"))))
#+end_src
* DevDocs
Emacs viewer for DevDocs.

https://github.com/astoff/devdocs.el
#+begin_src emacs-lisp
  (use-package devdocs
    :ensure t
    :config
    (defun devdocs-at-point ()
      (interactive)
      (devdocs-lookup nil (selection-or-thing-at-point)))
    (global-set-key (kbd "M-D") 'devdocs-at-point))
#+end_src
* Eval Region
#+begin_src emacs-lisp
  (global-set-key (kbd "C-s-e") 'eval-region)
#+end_src
* Git Gutter
Emacs port of GitGutter which is Sublime Text Plugin.

https://github.com/emacsorphanage/git-gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :hook ((prog-mode . git-gutter-mode)))
#+end_src
* Grip GitHub Markdown Previews
Instant Github-flavored Markdown/Org preview using grip.

https://github.com/seagle0128/grip-mode
#+begin_src emacs-lisp
  (use-package grip-mode
    :ensure t
    :defer t
    :custom
    (grip-preview-use-webkit nil)
    (grip-github-user "jasonmj")
    (grip-github-password (auth-source-pick-first-password
			   :host "api.github.com"
			   :user "jasonmj^grip")))
#+end_src
* Fold This
Fold the active region in Emacs.

https://github.com/magnars/fold-this.el
#+begin_src emacs-lisp
  (use-package fold-this
    :ensure t
    :config
    (defun expand-and-fold-this ()
      (interactive)
      (expreg-expand)
      (fold-this
       (car (car (region-bounds)))
       (cdr (car (region-bounds)))))
    :bind (:map shell-mode-map ("C-<return>" . expand-and-fold-this)))
#+end_src
* Helpful
A better Emacs *help* buffer.

https://github.com/Wilfred/helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind (("C-h f" . helpful-function)
           ("C-h v" . helpful-variable)))
#+end_src
* Hide Show Minor Mode
Minor mode to selectively hide/show code and comment blocks.
#+begin_src emacs-lisp
    (use-package hs-minor-mode
      :hook ((heex-ts-mode prog-mode) . hs-minor-mode)
      :bind (("C-r" . hs-toggle-hiding)))
#+end_src
* Highlight Current Line
Highlights the line about the current buffer's point in all live windows.
#+begin_src emacs-lisp
  (global-hl-line-mode +1)
#+end_src
* Indent Bars
Fast, configurable indentation guide-bars for Emacs

https://github.com/jdtsmith/indent-bars
#+begin_src emacs-lisp
  (use-package indent-bars
    :ensure t
    :straight (:type git :host github :repo "jdtsmith/indent-bars")
    :hook ((heex-ts-mode prog-mode) . (lambda () (run-with-idle-timer 0.05 nil (lambda () (indent-tabs-mode -1) (indent-bars-mode 1))))))
#+end_src
* Keyboard Escape Quit
This command can exit an interactive command such as query-replace, can clear out a prefix argument or a region, can get out of the minibuffer or other recursive edit, cancel the use of the current buffer (for special-purpose buffers), or go back to just one window (by deleting all but the selected window).
#+begin_src emacs-lisp
  (key-seq-define-global "gf" 'keyboard-escape-quit)
#+end_src
* Mouse Avoidance Mode
With mouse avoidance mode set to banish, the behavior will move the mouse to the upper-right corner on any keypress.
#+begin_src emacs-lisp
  (mouse-avoidance-mode 'banish)
  (setq mouse-avoidance-banish-position '((frame-or-window . frame)
					  (side . right)
					  (side-pos . 0)
					  (top-or-bottom . top)
					  (top-or-bottom-pos . 0)))
#+end_src
* Pinentry
A pinentry for gpg that uses emacsclient to prompt for the passphrase. 

https://github.com/ecraven/pinentry-emacs
#+begin_src emacs-lisp
  (use-package pinentry
    :ensure t
    :hook (after-init . pinentry-start))
#+end_src
* Sideline
Show information on the side.

https://github.com/emacs-sideline/sideline
#+begin_src emacs-lisp
(use-package sideline
  :init
  (setq sideline-backends-left-skip-current-line t   ; don't display on current line (left)
        sideline-backends-right-skip-current-line t  ; don't display on current line (right)
        sideline-order-left 'down                    ; or 'up
        sideline-order-right 'up                     ; or 'down
        sideline-format-left "%s   "                 ; format for left aligment
        sideline-format-right "   %s"                ; format for right aligment
        sideline-priority 100                        ; overlays' priority
        sideline-display-backend-name t))            ; display the backend name
#+end_src
** Sideline Blame
Show blame messages with sideline.

https://github.com/emacs-sideline/sideline-blame
#+begin_src emacs-lisp
  (use-package sideline
    :ensure t
    :init (add-to-list 'sideline-backends-right '(sideline-blame . down)))
#+end_src
** Sideline Flymake
Show flymake errors with sideline.

https://github.com/emacs-sideline/sideline-flymake
#+begin_src emacs-lisp
  (use-package sideline-flymake
    :ensure t
    :hook (flymake-mode . sideline-mode)
    :init
    (setq sideline-flymake-display-mode 'point) ; 'point to show errors only on point
						; 'line to show errors on the current line
    (add-to-list 'sideline-backends-right '(sideline-flymake . up)))
#+end_src
* Short Answer Yes/No
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* Tramp
The file name handler implementation for ssh-alike remote connections.
#+begin_src emacs-lisp
  (use-package tramp
    :config (put 'tramp-remote-path '(tramp-own-remote-path) nil)
	    (add-to-list 'tramp-remote-path "~/.asdf/shims/"))
#+end_src
* Transient Posframe
This package is a transient extension, which use posframe to show transient popups.

https://github.com/yanghaoxie/transient-posframe
#+begin_src emacs-lisp
  (use-package transient-posframe
    :ensure t
    :hook (magit-status-mode . transient-posframe-mode))
#+end_src
* Wgrep
Writable grep buffer and apply the changes to files.

https://github.com/mhayashi1120/Emacs-wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t
    :custom (wgrep-auto-save-buffer t))
#+end_src
* Which Key
Emacs package that displays available keybindings in popup.

https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :custom (which-key-idle-delay 0.25)
    :hook (after-init . which-key-mode))
#+end_src
* Which Key Posframe
Let emacs-which-key use posframe to show its popup. 

https://github.com/yanghaoxie/which-key-posframe
#+begin_src emacs-lisp
  (use-package which-key-posframe
    :ensure t
    :config (custom-set-faces '(which-key-posframe-border ((t nil))))
    :custom
    (which-key-posframe-border-width  20)
    (which-key-posframe-poshandler 'posframe-poshandler-window-top-center-offset)
    (which-key-posframe-parameters `((alpha . 90)))
    :hook (after-init . which-key-posframe-mode))
#+end_src
* Writeroom
A minor mode for Emacs that implements a distraction-free writing mode.

https://github.com/joostkremers/writeroom-mode
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :ensure t
    :hook ((devdocs-mode . writeroom-mode))
    :custom (writeroom-width 100))
#+end_src
