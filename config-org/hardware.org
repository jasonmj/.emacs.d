#+TITLE: Hardware
#+PROPERTY: header-args      :tangle "../config-elisp/hardware.el"
* Audio Controls
Adjust the volume up and down or toggle audio mute. 
#+begin_src emacs-lisp
  (emacs-set-key (kbd "<XF86AudioLowerVolume>") (lambda ()
						       (interactive)
						       (call-process-shell-command "pamixer -d 2 --allow-boost")
						       (process-send-string xob-process (shell-command-to-string "pamixer --get-volume"))))
  (emacs-set-key (kbd "<XF86AudioRaiseVolume>") (lambda ()
						       (interactive)
						       (call-process-shell-command "pamixer -i 2 --allow-boost")
						       (process-send-string xob-process (shell-command-to-string "pamixer --get-volume"))))
  (emacs-set-key (kbd "<XF86AudioMute>") (lambda ()
						(interactive)
						(call-process-shell-command "pamixer -t")
						(process-send-string xob-process (shell-command-to-string "pamixer --get-volume"))))
#+end_src
* Battery Notifier
Display notifications when battery capacity is low.

https://github.com/jasonmj/battery-notifier
#+begin_src emacs-lisp
  (use-package battery-notifier
    :ensure t
    :after (ednc)
    :config
    (defun my/battery-notifier-notification-function (message)
      (notifications-notify :title "Battery Notifier" :body message :app-name "Emacs" :actions '("default" "default") :urgency 'critical))
    :custom
    (battery-notifier-notification-function 'my/battery-notifier-notification-function)
    :hook ((after-init . battery-notifier-mode)
	   (battery-notifier-capacity-critical . (lambda () (call-process-shell-command "systemctl suspend")))))
#+end_src

* Lock
Use slock to lock the screen when the power button is pressed with the shift key. 
#+begin_src emacs-lisp
  (emacs-set-key (kbd "<S-XF86PowerOff>") (lambda () (interactive) (shell-command "slock")))
#+end_src
* Screen Brightness
Increase or decrease the screen brightness. Alternatively set the max/min brightness with shift + brightness keys. 
#+begin_src emacs-lisp
  (emacs-set-key (kbd "<S-XF86MonBrightnessDown>") (lambda ()
							  (interactive)
							  (call-process-shell-command "brightnessctl set 5")
							  (process-send-string xob-process (shell-command-to-string "brightnessctl get"))))
  (emacs-set-key (kbd "<S-XF86MonBrightnessUp>") (lambda ()
							(interactive)
							(call-process-shell-command "brightnessctl set 100")
							(process-send-string xob-process (shell-command-to-string "brightnessctl get"))))
  (emacs-set-key (kbd "<XF86MonBrightnessDown>") (lambda ()
						   (interactive)
						   (let* ((current (string-to-number (shell-command-to-string "brightnessctl get")))
							  (new (number-to-string (- current 5))))
							(call-process-shell-command (concat "brightnessctl set " new))
							(process-send-string xob-process new))))
  (emacs-set-key (kbd "<XF86MonBrightnessUp>") (lambda ()
						      (interactive)
						      (let* ((current (string-to-number (shell-command-to-string "brightnessctl get")))
							  (new (number-to-string (+ current 5))))
							(call-process-shell-command (concat "brightnessctl set " new))
							(process-send-string xob-process new))))
#+end_src
* Suspend
Suspend the machine with "C-x ." or suspend and lock with "C-x >". 
#+begin_src emacs-lisp
(defun suspend()
  (interactive)
  (shell-command "systemctl suspend"))
(defun suspend-lock()
  (interactive)
  (shell-command "systemctl suspend")
  (shell-command "slock"))
(emacs-set-key (kbd "C-x >") 'suspend-lock)
(emacs-set-key (kbd "C-x .") 'suspend)
#+end_src
* xob
#+begin_src emacs-lisp
  (unless (eq system-type 'darwin)
    (setq xob-process (make-process :name "xob"
				    :buffer nil
				    :command '("xob")
				    :connection-type 'pipe)))
#+end_src
