#+TITLE: Editing
#+PROPERTY: header-args      :tangle "../config-elisp/editing.el"
* Backtab
Unindent by 2 spaces with shift tab.
#+begin_src emacs-lisp
(global-set-key (kbd "<backtab>") 'un-indent-by-removing-2-spaces)
(defun un-indent-by-removing-2-spaces ()
  (interactive)
  (save-excursion
    (save-match-data
      (beginning-of-line)
      ;; get rid of tabs at beginning of line
      (when (looking-at "^\\s-+")
        (untabify (match-beginning 0) (match-end 0)))
      (when (looking-at "^  ")
        (replace-match "")))))
#+end_src
* Comment Line
Comment or uncomment current line and leave point after it.
#+begin_src emacs-lisp
  (global-set-key (kbd "M-;") 'comment-line)
#+end_src
* Display Line Numbers
Display line numbers in the buffer.
#+begin_src emacs-lisp
  (use-package emacs
    :hook ((prog-mode . display-line-numbers-mode)))
#+end_src
* Drag Stuff
#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :bind (("M-p" . drag-stuff-up)
	   ("M-n" . drag-stuff-down)))
#+end_src
* Duplicate Line
A simple elisp function to duplicate the current line.
#+begin_src emacs-lisp
  (defun duplicate-line ()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line 1)
    (yank)
    (yank)
    (previous-line)
    (backward-word))
  (global-set-key (kbd "C-c d") 'duplicate-line)
 #+end_src
* Electric Pairs
Electric Pair mode is a global minor mode.  When enabled, typing an open parenthesis automatically inserts the corresponding closing parenthesis, and vice versa.
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src    
* Expreg
Expand the current region based on a smart usage of regex. 

https://github.com/casouri/expreg
#+begin_src emacs-lisp
  (use-package expreg
    :ensure t
    :bind (("s-<tab>" . expreg-expand)
	   ("S-TAB" . expreg-expand)))
#+end_src
* Flymake
#+begin_src emacs-lisp
(key-chord-define-global "-=" 'flymake-show-buffer-diagnostics)
#+end_src
* Highlight Matching Parenthesis
When enabled, any matching parenthesis is highlighted in show-paren-style after show-paren-delay seconds of Emacs idle time.
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src
* Hungry Delete
This package implements hungry deletion, meaning that deleting a whitespace character will delete all whitespace until the next non-whitespace character.

https://github.com/nflath/hungry-delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :hook ((org-mode . hungry-delete-mode)
	   (prog-mode . hungry-delete-mode)))
#+end_src
* iEdit
Modify multiple occurrences simultaneously.

https://github.com/victorhge/iedit
#+begin_src emacs-lisp
  (use-package iedit
    :ensure t
    :bind (("C-c ;" . iedit-mode)))
#+end_src
* Increment / Decrement Numbers
Increment / Decrement binary, octal, decimal and hex literals.

https://github.com/cofi/evil-numbers
#+begin_src emacs-lisp
  (use-package evil-numbers
    :ensure t
    :bind (("M-s-p" . evil-numbers/inc-at-pt)
	   ("M-s-n" . evil-numbers/dec-at-pt)))
#+end_src
* Indent Bars
Fast, configurable indentation guide-bars for Emacs

https://github.com/jdtsmith/indent-bars
#+begin_src emacs-lisp
  (unless (not (eq system-type 'darwin))
    (use-package indent-bars
    :ensure t
    :straight (:type git :host github :repo "jdtsmith/indent-bars")
    :hook (prog-mode . indent-bars-mode)))
#+end_src
* Kill Ring Clear
#+begin_src emacs-lisp
(defun kill-ring-clear () (interactive) (setq kill-ring nil))
#+end_src
* Kill Whole Line
A simple function to cleanly kill the whole line where the cursor is located. 
#+begin_src emacs-lisp
  (global-set-key (kbd "C-k") (lambda () (interactive) (insert-char 32 1) (kill-whole-line)))
#+end_src
* Kill Word Backwards No Copy
#+begin_src emacs-lisp
(defun backward-delete-word-no-copy (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (delete-word-no-copy (- arg)))
(global-set-key (kbd "<C-backspace>") 'backward-delete-word-no-copy)
(global-set-key (kbd "<M-backspace>") 'backward-delete-word-no-copy)
#+end_src

* Kill Word No Copy
#+begin_src emacs-lisp
(defun delete-word-no-copy (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (delete-region
   (point)
   (progn
     (forward-word arg)
     (point))))
(global-set-key (kbd "M-d") 'delete-word-no-copy)
#+end_src
* Markdown Mode
#+begin_src emacs-lisp
  (use-package markdown-mode :ensure t)
#+end_src
* Open Line Below
#+begin_src emacs-lisp
(defun open-line-below ()
  (interactive)
  (move-end-of-line 1)
  (newline))
(global-set-key [(shift return)] 'open-line-below)
#+end_src
* Outline Minor Mode
A minor mode for cycling outlines with selective display.
#+begin_src emacs-lisp
  (use-package outline
    :hook ((elixir-ts-mode . outline-minor-mode))
    :bind (("C-<return>" . outline-cycle)
	   ("C-S-<return>" . my/outline-cycle-buffer))
    :config (setq outline-blank-line t)
    (set-display-table-slot
     standard-display-table
     'selective-display
     (let ((face-offset (* (face-id 'shadow) (lsh 1 22))))
       (vconcat (mapcar (lambda (c) (+ face-offset c)) " ‚èµ"))))
    (defun my/outline-cycle-buffer () (interactive)
	   (if (eq outline--cycle-buffer-state 'show-all) (setq outline--cycle-buffer-state 'top-level))
	   (outline-cycle-buffer)))
#+end_src
* Rainbow Delimiters
Highlights delimiters such as parentheses, brackets or braces according to their depth. Each successive level is highlighted in a different color. 

https://github.com/Fanael/rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Refill Region
A simple function to unfill and fill the currently selected region. 
#+begin_src emacs-lisp
  (defun refill-region (beg end)
    (interactive "*r")
    (unfill-region beg end)
    (let ((end (line-end-position)))
      (fill-region beg end)))
  (global-set-key (kbd "C-x r r") 'refill-region)
#+end_src
* Select Line
#+begin_src emacs-lisp
  (defun mark-line () (back-to-indentation) (set-mark-command nil) (move-end-of-line))
  (global-set-key (kbd "C-,") 'mark-line)
#+end_src
* Spell Fu
Fast highlighting of all on-screen misspelled words.

https://codeberg.org/ideasman42/emacs-spell-fu/
#+begin_src emacs-lisp
  (use-package spell-fu
    :ensure t
    :config (setq ispell-personal-dictionary "~/.emacs.d/.local/etc/ispell/.pws")
    :hook ((prog-mode . spell-fu-mode)
	   (org-mode . spell-fu-mode)
	   (markdown-mode . spell-fu-mode)))
#+end_src
* Subword Mode
A minor mode that changes the definition of a word so that word-based commands stop inside symbols with mixed uppercase and lowercase letters, e.g. "GtkWidget", "EmacsFrameClass", "NSGraphicsContext".
#+begin_src emacs-lisp
  (use-package emacs
    :hook ((prog-mode minibuffer-setup shell-mode) . subword-mode))
#+end_src
* Sudo Edit
Allows to open files as another user, by default "root".

https://github.com/nflath/sudo-edit/blob/master/sudo-edit.el
#+begin_src emacs-lisp
(use-package sudo-edit :ensure t)
#+end_src
* Symbol Overlay
Highlight symbols with keymap-enabled overlays.

https://github.com/wolray/symbol-overlay
#+begin_src emacs-lisp
  (use-package symbol-overlay
    :ensure t
    :bind (("M-i" . symbol-overlay-put))
    :hook ((prog-mode . symbol-overlay-mode)))
#+end_src
* Topsy
Simple sticky header showing definition beyond top of window.

https://github.com/alphapapa/topsy.el
#+begin_src emacs-lisp
(use-package topsy
  :ensure t
  :hook prog-mode)
#+end_src
* Undo Fu
#+begin_src emacs-lisp
  (use-package undo-fu
    :ensure t
    :bind (("C-z" . undo-fu-only-undo)
	   ("C-S-z" . undo-fu-only-redo)))
  (use-package undo-fu-session
    :ensure t
    :hook (after-init . global-undo-fu-session-mode)
    :custom (undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))
#+end_src
* Unfill Region
Unfill the region, joining text paragraphs into a single logical line.  This is useful, e.g., for use with visual-line-mode.
#+begin_src emacs-lisp
(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single
    logical line.  This is useful, e.g., for use with `visual-line-mode'."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))
#+end_src
* Upper/Lowercase Chars
#+begin_src emacs-lisp
  (use-package emacs
    :bind (("M-u" . upcase-char)
	   ("M-l" . downcase-dwim)))
#+end_src
* WS Butler Mode
Unobtrusively trim extraneous white-space *ONLY* in lines edited. 

https://github.com/lewang/ws-butler
#+begin_src emacs-lisp
  (use-package ws-butler
    :ensure t
    :hook ((prog-mode . ws-butler-mode)))
#+end_src
